name: CI and CD data model

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - staging

jobs:
  retraining_ai_model:
    runs-on: ubuntu-latest
    container: docker://dvcorg/cml:latest
    env:
      repo_token: ${{ secrets.GITHUBTOKEN }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: us-east-1

    steps:
      - uses: actions/checkout@v2

      - name: Upgrade pip
        run: pip install --upgrade pip

      - name: Install requirements
        run:
          pip3 install -r requirements.txt

      - name: Download data from S3
        run: |
          python3 download_data.py

      - name: Execute the training model
        run: |
          python3 retraining.py

      - name: Generating report
        run: |
          echo "## Model metrics" > report.md
          cat metrics.txt >> report.md
          
          echo "## Data visualization" >> report.md
          cml-publish feature_importance.png --md >> report.md
          
          cml-send-comment report.md

  build_docker_image:
    needs: retraining_ai_model
    runs-on: ubuntu-latest

    steps:
      - name: Check the repo
        uses: actions/checkout@v2

      - name: Login to dockerhub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build docker image
        run: docker build -t napsterz4/mlops-cancer-seccion1:dev .

      - name: Docker push to Dockerhub
        run: docker push napsterz4/mlops-cancer-seccion1:dev

      - name: Login into the docker hub
        run: echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u '${{ secrets.DOCKER_USERNAME }}' --password-stdin

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }} # Direccion ip publica
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }} # este es el .pem que descargamos al crear el server
          script: |
            docker login -u '${{ secrets.DOCKER_USERNAME }}' -p '${{ secrets.DOCKER_PASSWORD }}'
            if docker ps --all | grep breast-cancer; then
              docker stop breast-cancer
              docker rm breast-cancer
            fi
            
            docker pull ${{ secrets.DOCKER_USERNAME }}/mlops-cancer-seccion1:dev
            docker run -d --name breast-cancer -p 8000:8000 ${{ secrets.DOCKER_USERNAME }}/mlops-cancer-seccion1:dev